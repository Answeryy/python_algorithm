给你一个字符串 s 和一个字符 c ，且 c 是 s 中出现过的字符。

返回一个整数数组 answer ，
其中 answer.length == s.length 
且 answer[i] 是 s 中从下标 i 到离它 最近 的字符 c 的 距离 。

两个下标 i 和 j 之间的 距离 为 abs(i - j) ，其中 abs 是绝对值函数。

 



分析：
    
    有一个字符串s，和一个目标字符c（该字符可能在字符串中重复出现）

    需要将字符串中的每一个字符都与相邻的目标字符c做比较计算他们的距离的绝对值，并且记录这个最小距离值。


    answer是要返回的距离列表
    answer = [0] * len(s)
    # 这里得到一个长度为 n 的列表，其中的元素全部为0

    # 创建两个指针
    l = 0
    r = 0
    val = 0
    #  构造循环移动指针遍历数组(字符串)
    while r < len(s):
        # 第一种情况元素在第一个c左边
        if s[r] == c and val == 0:
            while l < r:
                answer[l] = r-l
                l += 1
            # 记录当前c的位置
            val = r 
            # 判断当左右指针相等时，左指针停止移动
        # 第二种情况元素在两个c之间
        elif s[r] == c and val != 0:
            # 更新answer数组
            while l < r:
                answer[l] = min(abs(val-l), abs(r-l))
                l += 1
            # 将val更新为当前c的位置
            val = r
        # 第三种情况元素在最后一个c右边
        else:
            while l < r:
                answer[l] == abs(l-val)
                l += 1
        r += 1
    return answer
     


s = 'a a b a'
     0 1 2 3  
c = 'b'
 # l = r = 0
        # n = len(s)
        # res = [n] * n
        # flag = False  # 判断是否遇到过C
        # while r < n:
        #     if s[r] == c:
        #         res[r] = 0
        #         while l <= r:
        #             res[l] = min(res[l], r - l)
        #             l += 1
        #         r += 1
        #         flag = True
        #     else:
        #         if flag:
        #             res[r] = res[r-1] + 1
        #         r += 1
        # return res